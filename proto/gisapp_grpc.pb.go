// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gisapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GISCalcClient is the client API for GISCalc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GISCalcClient interface {
	RouteLength(ctx context.Context, in *RouteLengthRequest, opts ...grpc.CallOption) (*RouteLengthResponse, error)
}

type gISCalcClient struct {
	cc grpc.ClientConnInterface
}

func NewGISCalcClient(cc grpc.ClientConnInterface) GISCalcClient {
	return &gISCalcClient{cc}
}

func (c *gISCalcClient) RouteLength(ctx context.Context, in *RouteLengthRequest, opts ...grpc.CallOption) (*RouteLengthResponse, error) {
	out := new(RouteLengthResponse)
	err := c.cc.Invoke(ctx, "/gisapp.GISCalc/RouteLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GISCalcServer is the server API for GISCalc service.
// All implementations must embed UnimplementedGISCalcServer
// for forward compatibility
type GISCalcServer interface {
	RouteLength(context.Context, *RouteLengthRequest) (*RouteLengthResponse, error)
	mustEmbedUnimplementedGISCalcServer()
}

// UnimplementedGISCalcServer must be embedded to have forward compatible implementations.
type UnimplementedGISCalcServer struct {
}

func (UnimplementedGISCalcServer) RouteLength(context.Context, *RouteLengthRequest) (*RouteLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteLength not implemented")
}
func (UnimplementedGISCalcServer) mustEmbedUnimplementedGISCalcServer() {}

// UnsafeGISCalcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GISCalcServer will
// result in compilation errors.
type UnsafeGISCalcServer interface {
	mustEmbedUnimplementedGISCalcServer()
}

func RegisterGISCalcServer(s grpc.ServiceRegistrar, srv GISCalcServer) {
	s.RegisterService(&GISCalc_ServiceDesc, srv)
}

func _GISCalc_RouteLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GISCalcServer).RouteLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gisapp.GISCalc/RouteLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GISCalcServer).RouteLength(ctx, req.(*RouteLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GISCalc_ServiceDesc is the grpc.ServiceDesc for GISCalc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GISCalc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gisapp.GISCalc",
	HandlerType: (*GISCalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteLength",
			Handler:    _GISCalc_RouteLength_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gisapp.proto",
}
