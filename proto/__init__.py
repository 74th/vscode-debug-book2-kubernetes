# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/gisapp.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
    latitude: float = betterproto.double_field(1)
    longitude: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class RouteLengthRequest(betterproto.Message):
    route: List["Point"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RouteLengthResponse(betterproto.Message):
    length: float = betterproto.double_field(1)


class GisCalcStub(betterproto.ServiceStub):
    async def route_length(
        self, *, route: Optional[List["Point"]] = None
    ) -> "RouteLengthResponse":
        route = route or []

        request = RouteLengthRequest()
        if route is not None:
            request.route = route

        return await self._unary_unary(
            "/proto.GISCalc/RouteLength", request, RouteLengthResponse
        )


class GisCalcBase(ServiceBase):
    async def route_length(
        self, route: Optional[List["Point"]]
    ) -> "RouteLengthResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_route_length(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "route": request.route,
        }

        response = await self.route_length(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/proto.GISCalc/RouteLength": grpclib.const.Handler(
                self.__rpc_route_length,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteLengthRequest,
                RouteLengthResponse,
            ),
        }
